<?php

namespace obdo\KuchiKomiRESTBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * KuchiRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KuchiRepository extends EntityRepository
{
    public function getNbKuchi()
    {
        return $this->createQueryBuilder('kuchi')
                    ->select('COUNT(kuchi)')
                    ->getQuery()
                    ->getSingleScalarResult();
    }
    
    public function getKuchis($nombreParPage, $page, $sort)
    {
        // On déplace la vérification du numéro de page dans cette méthode
        if ($page < 1)
        {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
        }

        // La construction de la requête reste inchangée
        $query = $this->createQueryBuilder('kuchis')
                      ->leftJoin('kuchis.kuchiGroup', 'kuchiGroup')
                      ->addSelect('kuchiGroup');

        if( $sort == "active_up")
        {
            $query->orderBy('kuchis.active','DESC');
        }
        elseif( $sort == "active_down" )
        {
            $query->orderBy('kuchis.active','ASC');
        }
        elseif( $sort == "name_up" )
        {
            $query->orderBy('kuchis.name','DESC');
        }
        elseif( $sort == "name_down" )
        {
            $query->orderBy('kuchis.name','ASC');
        }
        elseif( $sort == "creation_up" )
        {
            $query->orderBy('kuchis.timestampCreation','ASC');
        }
        elseif( $sort == "creation_down" )
        {
            $query->orderBy('kuchis.timestampCreation','DESC');
        }
        elseif( $sort == "suppression_up" )
        {
            $query->orderBy('kuchis.timestampSuppression','ASC');
        }
        elseif( $sort == "suppression_down" )
        {
            $query->orderBy('kuchis.timestampSuppression','DESC');
        }
        elseif( $sort == "group_up" )
        {
            $query->orderBy('kuchiGroup.name','ASC');
        }
        elseif( $sort == "group_down" )
        {
            $query->orderBy('kuchiGroup.name','DESC');
        }
        
        $query->getquery();
        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);

        return new Paginator($query);
    }

    public function getAddedKuchis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchi')
    			   ->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    			   ->addSelect('subscriptions')
    			   ->setParameter('komi', $komi)
    			   ->andWhere('kuchi.active =true')
    			   ->andWhere('kuchi.timestampCreation >= :fromDate')
     	           ->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    	 
    	return $qb->getQuery()->getResult();
    }
    
    public function getUpdatedKuchis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchi')
    			   ->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    			   ->addSelect('subscriptions')
    			   ->setParameter('komi', $komi)
    			   ->andWhere('kuchi.active =true')
    			   ->andWhere('kuchi.timestampCreation < :fromDate')
    			   ->andWhere('kuchi.timestampLastUpdate >= :fromDate')
     	           ->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    
    public function getDeletedKuchis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchi')
    			   ->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    			   ->addSelect('subscriptions')
    			   ->setParameter('komi', $komi)
    			   ->andWhere('kuchi.active = false')
    			   ->andWhere('kuchi.timestampSuppression >= :fromDate')
     	           ->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
}
