<?php

namespace obdo\KuchiKomiRESTBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * KuchiRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KuchiRepository extends EntityRepository
{
    public function getNbKuchi()
    {
        return $this->createQueryBuilder('kuchi')
                    ->select('COUNT(kuchi)')
                    ->getQuery()
                    ->getSingleScalarResult();
    }
    
    public function getNbKuchiGroup($kuchigroupid)
    {
        return $this->createQueryBuilder('kuchi')
                    ->select('COUNT(kuchi)')
                    ->andWhere('kuchi.active = true and kuchi.kuchiGroup = :groupid')
                    ->setParameter('groupid', $kuchigroupid)
                    ->getQuery()
                    ->getSingleScalarResult();
    }
    
    public function getNbKuchiAbo($aboid)
    {
        return $this->createQueryBuilder('kuchi')
                    ->select('COUNT(kuchi)')
                    ->andWhere('kuchi.active = true and kuchi.abonnement = :aboid')
                    ->setParameter('aboid', $aboid)
                    ->getQuery()
                    ->getSingleScalarResult();
    }
        
    public function getNbKuchiMois($mois,$an)
    {
        $requete = 'select day( date( k.timestampCreation )) as jour , count( k.timestampCreation ) as nbre ';
        $requete = $requete . 'from Kuchi k where month( date( k.timestampCreation )) = :mois AND year( date( k.timestampCreation )) = :an';
        $requete = $requete . ' group by day( date( k.timestampCreation ))';

        $em = $this->getEntityManager();
        $db = $em->getConnection();
        $query = $db->prepare($requete);
        $query->execute(array('mois' => intval($mois), 'an' => intval($an)));
        return $query->fetchAll();
    }
    
    public function getKuchis($nombreParPage, $page, $sort)
    {
        // On déplace la vérification du numéro de page dans cette méthode
        if ($page < 1)
        {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
        }

        // La construction de la requête reste inchangée
        $query = $this->createQueryBuilder('kuchis')
                      ->leftJoin('kuchis.kuchiGroup', 'kuchiGroup')
                      ->addSelect('kuchiGroup');

        if( $sort == "active_up")
        {
            $query->orderBy('kuchis.active','DESC');
        }
        elseif( $sort == "active_down" )
        {
            $query->orderBy('kuchis.active','ASC');
        }
        elseif( $sort == "name_up" )
        {
            $query->orderBy('kuchis.name','DESC');
        }
        elseif( $sort == "name_down" )
        {
            $query->orderBy('kuchis.name','ASC');
        }
        elseif( $sort == "creation_up" )
        {
            $query->orderBy('kuchis.timestampCreation','ASC');
        }
        elseif( $sort == "creation_down" )
        {
            $query->orderBy('kuchis.timestampCreation','DESC');
        }
        elseif( $sort == "suppression_up" )
        {
            $query->orderBy('kuchis.timestampSuppression','ASC');
        }
        elseif( $sort == "suppression_down" )
        {
            $query->orderBy('kuchis.timestampSuppression','DESC');
        }
        elseif( $sort == "group_up" )
        {
            $query->orderBy('kuchiGroup.name','ASC');
        }
        elseif( $sort == "group_down" )
        {
            $query->orderBy('kuchiGroup.name','DESC');
        }
        
        $query->getquery();
        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);

        return new Paginator($query);
    }

    public function getAddedKuchis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchi')
    			   ->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    			   ->addSelect('subscriptions')
    			   ->setParameter('komi', $komi)
    			   ->Where('kuchi.active =true')
    			   ->andWhere('subscriptions.active = true AND kuchi.timestampCreation >= :fromDate')
    			   ->orWhere('subscriptions.active = true AND kuchi.timestampCreation < :fromDate AND :fromDate < subscriptions.timestampLastUpdate ')
     	           ->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    	 
    	return $qb->getQuery()->getResult();
    }
    
    public function getUpdatedKuchis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchi')
    			   ->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    			   ->addSelect('subscriptions')
    			   ->setParameter('komi', $komi)
    			   ->Where('kuchi.active =true')
    			   ->andWhere('kuchi.timestampCreation < :fromDate AND kuchi.timestampLastUpdate >= :fromDate')
     	           ->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    
    public function getDeletedKuchis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchi')
    			   ->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    			   ->addSelect('subscriptions')
    			   ->setParameter('komi', $komi)
    			   ->Where('kuchi.active = false AND kuchi.timestampSuppression >= :fromDate')
     	           ->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    
    public function getNbKuchiByUserId($userid)
    {
        return $this->createQueryBuilder('kuchi')
                    ->select('COUNT(kuchi)')
                    ->join('kuchi.users', 'users')
                    ->where('users.id = :userid')
                    ->setParameter('userid', $userid)
                    ->getQuery()
                    ->getSingleScalarResult();
    }
    
    //pour alimentation formulaire le getResult ce fait dans le formulaire
    public function getKuchisByUserId($userid)
    {
        //il faut aller chrercher les groupes du userid puis les kuchis des groupes
        $qb = $this->createQueryBuilder('kuchi')
                ->leftjoin('kuchi.kuchiGroup','kuchiGroup')
                ->join('kuchiGroup.users', 'users')
                ->where('users.id = :userid')
                ->setParameter('userid', $userid);

        return $qb;
    }
    
    public function getKuchiListByUserId($nombreParPage, $page, $sort, $userid, $userrole)
    {
        if ($page < 1)
        {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
        }
        
        if($userrole == 'ROLE_KUCHI')
        {
            $query = $this->createQueryBuilder('kuchis')
                          ->leftJoin('kuchis.kuchiGroup', 'kuchiGroup')
                          ->addSelect('kuchiGroup')
                          ->join('kuchis.users', 'users')
                          ->where('users.id = :userid')
                          ->setParameter('userid', $userid);
        }
        else
        {
            $query = $this->createQueryBuilder('kuchis')
                          ->leftJoin('kuchis.kuchiGroup', 'kuchiGroup')
                          ->addSelect('kuchiGroup')
                          ->join('kuchiGroup.users', 'users')
                          ->where('users.id = :userid')
                          ->setParameter('userid', $userid);
        }
           
        if( $sort == "active_up")
        {
            $query->orderBy('kuchis.active','DESC');
        }
        elseif( $sort == "active_down" )
        {
            $query->orderBy('kuchis.active','ASC');
        }
        elseif( $sort == "name_up" )
        {
            $query->orderBy('kuchis.name','DESC');
        }
        elseif( $sort == "name_down" )
        {
            $query->orderBy('kuchis.name','ASC');
        }
        elseif( $sort == "creation_up" )
        {
            $query->orderBy('kuchis.timestampCreation','ASC');
        }
        elseif( $sort == "creation_down" )
        {
            $query->orderBy('kuchis.timestampCreation','DESC');
        }
        elseif( $sort == "suppression_up" )
        {
            $query->orderBy('kuchis.timestampSuppression','ASC');
        }
        elseif( $sort == "suppression_down" )
        {
            $query->orderBy('kuchis.timestampSuppression','DESC');
        }
        
        $query->getquery();
        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);

        return new Paginator($query);

    }
}
