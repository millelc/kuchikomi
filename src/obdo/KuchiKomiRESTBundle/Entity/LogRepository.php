<?php

namespace obdo\KuchiKomiRESTBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * LogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRepository extends EntityRepository
{

    public function getLogs($nombreParPage, $page, $sort)
    {
        // On déplace la vérification du numéro de page dans cette méthode
        if ($page < 1)
        {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
        }

        // La construction de la requête reste inchangée
        $query = $this->createQueryBuilder('logs');

        if( $sort == "date_up")
        {
            $query->orderBy('logs.timestamp','DESC');
        }
        elseif( $sort == "date_down" )
        {
            $query->orderBy('logs.timestamp','ASC');
        }
        elseif( $sort == "level_up" )
        {
            $query->orderBy('logs.level','DESC');
        }
        elseif( $sort == "level_down" )
        {
            $query->orderBy('logs.level','ASC');
        }
        elseif( $sort == "message_up" )
        {
            $query->orderBy('logs.message','ASC');
        }
        elseif( $sort == "message_down" )
        {
            $query->orderBy('logs.message','DESC');
        }
        
        $query->getquery();
        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);

        return new Paginator($query);
    }

}
