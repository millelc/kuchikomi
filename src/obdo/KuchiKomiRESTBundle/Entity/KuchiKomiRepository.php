<?php

namespace obdo\KuchiKomiRESTBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * KuchiKomiRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KuchiKomiRepository extends EntityRepository
{
    public function getNbKuchiKomi()
    {
        return $this->createQueryBuilder('kuchikomi')
                    ->select('COUNT(kuchikomi)')
                    ->getQuery()
                    ->getSingleScalarResult();
    }
    
    public function getKuchiKomisToDisable()
    {
        $dateToCompare = new \DateTime('now', new \DateTimeZone('Europe/Paris'));
        $dateToCompare->sub(new \DateInterval('P14D'));
        
    	$qb = $this->createQueryBuilder('kuchikomi')
                    ->Where('kuchikomi.active = true AND kuchikomi.id > 1 AND kuchikomi.timestampEnd < :dateToCompare')
                    ->setParameter('dateToCompare', $dateToCompare);
    
    	return $qb->getQuery()->getResult();
    }
    
    public function getAddedKuchiKomis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
       	->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi AND subscriptions.active = true')
    	->addSelect('subscriptions')
    	->setParameter('komi', $komi)
    	->Where('kuchikomi.active = true AND kuchikomi.timestampCreation >= :fromDate')
    	->orWhere('kuchikomi.active = true AND kuchikomi.timestampCreation < :fromDate AND :fromDate < subscriptions.timestampLastUpdate ')
    	->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    

    public function getAddedKuchiKomisForKuchi( $kuchiAccount )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
    	->Where('kuchi = :kuchi')
    	->setParameter('kuchi', $kuchiAccount->getKuchi() )
    	->andWhere('kuchikomi.active = true AND kuchikomi.timestampCreation >= :fromDate')
    	->setParameter('fromDate', $kuchiAccount->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    
        public function getActiveKuchiKomisForKuchi($nombreParPage,$page,$sort,$kuchi)
    {
    	$qb = $this->createQueryBuilder('kuchikomis')
    	->leftJoin('kuchikomis.kuchi', 'kuchi')
    	->addSelect('kuchi')
    	->Where('kuchi = :kuchi')
    	->setParameter('kuchi', $kuchi )
    	->andWhere('kuchikomi.active = true');
        
        if( $sort == "active_up")
        {
            $query->orderBy('kuchikomis.active','DESC');
        }
        elseif( $sort == "active_down" )
        {
            $query->orderBy('kuchikomis.active','ASC');
        }
        elseif( $sort == "title_up" )
        {
            $query->orderBy('kuchikomis.title','DESC');
        }
        elseif( $sort == "title_down" )
        {
            $query->orderBy('kuchikomis.title','ASC');
        }
        elseif( $sort == "begin_up" )
        {
            $query->orderBy('kuchikomis.$timestampBegin','ASC');
        }
        elseif( $sort == "begin_down" )
        {
            $query->orderBy('kuchikomis.$timestampBegin','DESC');
        }
        elseif( $sort == "end_up" )
        {
            $query->orderBy('kuchikomis.$timestampEnd','ASC');
        }
        elseif( $sort == "end_down" )
        {
            $query->orderBy('kuchikomis.$timestampEnd','DESC');
        }
        
        $query->getquery();
        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);

        return new Paginator($query);
    	        	
    }
    
    
    public function getUpdatedKuchiKomis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
    	->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi AND subscriptions.active = true')
    	->addSelect('subscriptions')
    	->setParameter('komi', $komi)
    	->Where('kuchikomi.active = true AND kuchikomi.timestampCreation < :fromDate AND kuchikomi.timestampLastUpdate >= :fromDate')
    	->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    
    public function getUpdatedKuchiKomisForKuchi( $kuchiAccount )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
    	->Where('kuchi = :kuchi')
    	->setParameter('kuchi', $kuchiAccount->getKuchi() )
    	->andWhere('kuchikomi.active = true AND kuchikomi.timestampCreation < :fromDate AND kuchikomi.timestampLastUpdate >= :fromDate')
    	->setParameter('fromDate', $kuchiAccount->getTimestampLastSynchro() );

    	return $qb->getQuery()->getResult();
    }
    
    public function getDeletedKuchiKomis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
    	->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi AND subscriptions.active = true')
    	->addSelect('subscriptions')
    	->setParameter('komi', $komi)
    	->Where('kuchikomi.active = false AND kuchikomi.timestampSuppression >= :fromDate')
    	->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    
    public function getDeletedKuchiKomisForKuchi( $kuchiAccount )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
    	->Where('kuchi = :kuchi')
    	->setParameter('kuchi', $kuchiAccount->getKuchi())
    	->andWhere('kuchikomi.active = false AND kuchikomi.timestampSuppression >= :fromDate')
    	->setParameter('fromDate', $kuchiAccount->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    
    public function getNbKuchiKomiByUserId($userid)
    {
        return $this->createQueryBuilder('kuchikomi')
                    ->select('COUNT(kuchikomi)')
                    ->leftjoin('kuchikomi.kuchi','kuchi')
                    ->join('kuchi.users', 'users')
                    ->where('users.id = :userid')
                    ->setParameter('userid', $userid)
                    ->getQuery()
                    ->getSingleScalarResult(); 
    }
    
    
    public function getKuchiKomisListByUserId($page,$sort,$userid){
            $this->createQueryBuilder('kuchikomi')                    
                    ->leftjoin('kuchikomi.kuchi','kuchi')
                    ->join('kuchis.users', 'users')
                    ->where('users.id = :userid')
                    ->setParameter('userid', $userid);
            
        if( $sort == "active_up")
        {
            $query->orderBy('kuchikomis.active','DESC');
        }
        elseif( $sort == "active_down" )
        {
            $query->orderBy('kuchikomis.active','ASC');
        }
        elseif( $sort == "name_up" )
        {
            $query->orderBy('kuchikomis.name','DESC');
        }
        elseif( $sort == "name_down" )
        {
            $query->orderBy('kuchikomis.name','ASC');
        }
        elseif( $sort == "creation_up" )
        {
            $query->orderBy('kuchikomis.timestampCreation','ASC');
        }
        elseif( $sort == "creation_down" )
        {
            $query->orderBy('kuchikomis.timestampCreation','DESC');
        }
        elseif( $sort == "suppression_up" )
        {
            $query->orderBy('kuchikomis.timestampSuppression','ASC');
        }
        elseif( $sort == "suppression_down" )
        {
            $query->orderBy('kuchikomis.timestampSuppression','DESC');
        }
        
        $query->getquery();
        // On définit l'article à partir duquel commencer la liste
        $query->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);

        return new Paginator($query);
    }
    
 
    
}
