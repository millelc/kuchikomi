<?php

namespace obdo\KuchiKomiRESTBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * KuchiKomiRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KuchiKomiRepository extends EntityRepository
{
    public function getNbKuchiKomi()
    {
        return $this->createQueryBuilder('kuchikomi')
                    ->select('COUNT(kuchikomi)')
                    ->getQuery()
                    ->getSingleScalarResult();
    }
    
    public function getAddedKuchiKomis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
       	->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    	->addSelect('subscriptions')
    	->setParameter('komi', $komi)
    	->andWhere('kuchikomi.active =true')
    	->andWhere('kuchikomi.timestampCreation >= :fromDate')
    	->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }

    public function getUpdatedKuchiKomis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
    	->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    	->addSelect('subscriptions')
    	->setParameter('komi', $komi)
    	->andWhere('kuchikomi.active =true')
    	->andWhere('kuchikomi.timestampCreation < :fromDate')
    	->andWhere('kuchikomi.timestampLastUpdate >= :fromDate')
    	->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
    
    public function getDeletedKuchiKomis( $komi )
    {
    	$qb = $this->createQueryBuilder('kuchikomi')
    	->leftJoin('kuchikomi.kuchi', 'kuchi')
    	->addSelect('kuchi')
    	->join('kuchi.subscriptions', 'subscriptions', 'WITH', 'subscriptions.komi = :komi')
    	->addSelect('subscriptions')
    	->setParameter('komi', $komi)
    	->andWhere('kuchikomi.active = false')
    	->andWhere('kuchikomi.timestampSuppression >= :fromDate')
    	->setParameter('fromDate', $komi->getTimestampLastSynchro() );
    
    	return $qb->getQuery()->getResult();
    }
}
